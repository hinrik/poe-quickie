=encoding utf8

=head1 NAME

POE::Quickie - A lazy way to wrap blocking programs

=head1 SYNOPSIS

 use POE::Quickie;

 sub handler {
     my $self = $_[OBJECT];

     # the really lazy interface
     my ($stdout, $stderr, $exit_status) = quickie('foo.pl');
     print $stdout;

     # the more involved interface
     my $pid = POE::Quickie->run(
         Program     => ['foo.pl', 'bar'],
         StdoutEvent => 'stdout',
         Context     => 'remember this',
     );
 }

 sub stdout {
     my ($output, $context) = @_[ARG0, ARG1];
     print "got output: '$output' in the context of '$context'\n";
 }

=head1 DESCRIPTION

If you need nonblocking access to an external program, or want to execute
some blocking code in a separate process, but you don't want to write a
wrapper module or some L<POE::Wheel::Run|POE::Wheel::Run> boilerplate code,
then POE::Quickie can help. You just specify what you're interested in
(stdout, stderr, and/or exit code), and POE::Quickie will handle the rest in
a sensible way.

It has some convenience features, such as killing processes after a timeout,
and storing process-specific context information which will be delivered with
every event.

There is also an even lazier API which suspends the execution of your event
handler and gives control back to POE while your task is running, the same
way L<LWP::UserAgent::POE|LWP::UserAgent::POE> does. This is provided by the
L<C<quickie_*>|/FUNCTIONS> functions which are exported by default.

=head1 METHODS

=head2 C<new>

Constructs a POE::Quickie object. You only need to do this if you want to
specify any of the parameters below, since a POE::Quickie object will be
constructed automatically whenever it is needed. The rest of the methods can
be called on the object (C<< $object->run() >>) or as class methods
(C<< POE::Quickie->run() >>). You can safely let the object go out of scope;
POE::Quickie will continue to run your programs until they finish.

Takes 3 optional parameters: B<'debug'>, B<'default'>, and B<'trace'>. These
will be passed to the object's L<POE::Session|POE::Session> constructor. See
its documentation for details.

=head2 C<run>

This method starts a new program. It returns the process id of the newly
executed program.

You can either call it with a single argument (string, arrayref, or coderef),
which will used as the B<'Program'> argument, or you can supply the following
key-value pairs:

B<'Program'> (required), will be passed to POE::Wheel::Run's constructor.

B<'AltFork'> (optional), if true, a new instance of the active Perl
interpreter (L<C<$^X>|perlvar>) will be launched with B<'Program'> (which
must be a string) as the code argument (L<I<-e>|perlrun>), and the current
L<C<@INC>|perlvar> passed as include arguments (L<I<-I>|perlrun>). Default
is false.

B<'ProgramArgs'> (optional), same as the epynomous parameter to
POE::Wheel::Run.

B<'Input'> (optional), a string containing the input to the program. This
string, if provided, will be sent immediately to the program, and its
stdin will then be shut down. Note: no processing will be done on the data
before it is sent, so make sure you include newlines where needed if the
program requires them.

B<'StdoutEvent'> (optional), the event for delivering lines from the
program's STDOUT. If you don't supply this, they will be printed to the main
program's STDOUT. To explicitly ignore them, set this to C<undef>.

B<'StderrEvent'> (optional), the event for delivering lines from the
program's STDERR. If you don't supply this, they will be printed to the main
program's STDERR. To explicitly ignore them, set this to C<undef>.

B<'ExitEvent'> (optional), the event to be called when the program has exited.
If you don't supply this, a warning will be printed if the exit status is
nonzero. To explicitly ignore it, set this to C<undef>.

B<'Timeout'> (optional), a timeout in seconds after which the program will
be forcibly killed if it is still running. There is no timeout by default.

B<'Context'> (optional), a variable which will be sent back to you with every
event. If you pass a reference, that same reference will be delivered back
to you later (not a copy), so you can update it as you see fit.

B<'WheelArgs'> (optional), a hash reference of options which will be passed
verbatim to the underlying POE::Wheel::Run object's constructor. Possibly
useful if you want to change the input/output filters and such.

=head2 C<killall>

This kills all programs which POE::Quickie is managing for your session.
Takes one optional argument, a signal name. Defaults to SIGTERM.

=head2 C<programs>

Returns a hash reference of all the currently running programs. The key
is the process id, and the value is the context variable, if any.

=head1 OUTPUT

The following events might get sent to your session. The names correspond
to the options to L<C<run>|/run>.

=head2 StdoutEvent

=over 4

=item C<ARG0>: the chunk of STDOUT generated by the program

=item C<ARG1>: the process id of the child process

=item C<ARG2>: the context variable, if any

=back

=head2 StderrEvent

=over 4

=item C<ARG0>: the chunk of STDERR generated by the program

=item C<ARG1>: the process id of the child process

=item C<ARG2>: the context variable, if any

=back

=head2 ExitEvent

=over 4

=item C<ARG0>: the exit code produced by the program

=item C<ARG1>: the process id of the child process

=item C<ARG2>: the context variable, if any

=back

=head1 FUNCTIONS

The usage of these functions is modeled after the ones provided by
L<Capture::Tiny|Capture::Tiny>. They will not return until the executed
program has exited. However,
L<C<run_one_timeslice>|POE::Kernel/run_one_timeslice> in POE::Kernel will be
called in the meantime, so the rest of your application will continue to run.

They all take the same arguments as the L<C<run>|/run> method, except for the
B<'*Event'> and B<'Context'> arguments.

=head2 C<quickie>

Returns 3 values: the stdout, stderr, and exit code (L<C<$?>|perlvar>) of the
program.

=head2 C<quickie_tee>

Returns 3 values: the stdout, stderr, and exit code (L<C<$?>|perlvar>) of the
program. In addition, it will echo the stdout/stderr to your program's
stdout/stderr. Beware that stdout and stderr in the merged result are not
guaranteed to be properly ordered due to buffering.

=head2 C<quickie_merged>

Returns 2 values: the merged stdout & stderr, and exit code (L<C<$?>|perlvar>)
of the program.

=head2 C<quickie_tee_merged>

Returns 2 values: the merged stdout & stderr, and exit code (L<C<$?>|perlvar>)
of the program. In addition, it will echo the merged stdout & stderr to your
program's stdout. Beware that stdout and stderr in the merged result are not
guaranteed to be properly ordered due to buffering.

=head1 AUTHOR

Hinrik E<Ouml>rn SigurE<eth>sson, hinrik.sig@gmail.com

=head1 LICENSE AND COPYRIGHT

Copyright 2010 Hinrik E<Ouml>rn SigurE<eth>sson

This program is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
